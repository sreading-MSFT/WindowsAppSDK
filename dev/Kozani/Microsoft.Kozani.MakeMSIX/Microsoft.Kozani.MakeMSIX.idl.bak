// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

namespace Microsoft.Kozani.MakeMSIX
{
    [contractversion(1)]
    apicontract MakeMSIXContract{};

    /// Options for creating a package
    [contract(MakeMSIXContract, 1)]
    runtimeclass CreatePackageOptions
    {
        /// Created by callers to pass options into CreatePackage()
        CreatePackageOptions();

        /// Optional replacement package name.
        /// If field is empty, value from AppxManifest.xml is unchanged.
        String Name;

        /// Optional replacement package publisher.
        /// If field is empty, value from AppxManifest.xml is unchanged.
        String Publisher;

        /// Optional replacement package version
        /// If version is 0, value from AppxManifest.xml is unchanged.
        Windows.ApplicationModel.PackageVersion Version;
        
        /// Overwrite output file if it already exists.
        /// Defaults to true.
        Boolean OverwriteOutputFileIfExists;

        /// Validates elements of the package during creation.
        /// Defaults to false.
        Boolean ValidateFiles;
    };

    /// Options for creating a Kozani package
    [contract(MakeMSIXContract, 1)]
    runtimeclass CreateKozaniPackageOptions
    {
        /// Created by callers to pass options into CreateKozaniPackage()
        CreateKozaniPackageOptions();

        /// Remove extensions from the manifest.
        /// Defaults to false.
        Boolean RemoveExtensions;

        /// Optional replacement package name.
        /// If field is empty, value from AppxManifest.xml is unchanged.
        String Name;

        /// Optional replacement package publisher.
        /// If field is empty, value from AppxManifest.xml is unchanged.
        String Publisher;

        /// Optional replacement package version
        /// If version is 0, value from AppxManifest.xml is unchanged.
        Windows.ApplicationModel.PackageVersion Version;

        /// Languages supported by the output package
        /// If field is empty, all languages from the original package are maintained.
        Windows.Foundation.Collections.IVector<String> Languages{ get; };

        /// ScaleFactors supported by the output package
        /// If field is empty, all scale factors from the original package are maintained.
        Windows.Foundation.Collections.IVector<String> ScaleFactors{ get; };

        /// Overwrite output file if it already exists.
        /// Defaults to true.
        Boolean OverwriteOutputFileIfExists;

        /// Validates elements of the package during creation.
        /// Defaults to false.
        Boolean ValidateFiles;
    };

    /// Options for creating a bundle
    [contract(MakeMSIXContract, 1)]
    runtimeclass CreateBundleOptions
    {
        /// Created by callers to pass options into CreateBundle()
        CreateBundleOptions();

        /// Create as a flat bundle. Package locations will be stored as external path references
        /// rather than being stored inside the msixbundle file itself. 
        /// Defaults to false.
        Boolean FlatBundle;

        /// Optional. Sets the version in the AppxBundleManifest.xml
        /// If version is 0, the version is created based on the current time.
        Windows.ApplicationModel.PackageVersion Version;

        /// Overwrite output file if it already exists.
        /// Defaults to true.
        Boolean OverwriteOutputFileIfExists;
    };

    /// Options for unpacking a package
    [contract(MakeMSIXContract, 1)]
    runtimeclass ExtractPackageOptions
    {
        /// Created by callers to pass options into ExtractPackage()
        ExtractPackageOptions();

        /// If true, the operation will overwrite existing files in the output path
        /// when unpacking.
        /// If false, the operation will fail if a file already exists.
        Boolean OverwriteOutputFilesIfExists;
    };

    /// Options for unpacking a package
    [contract(MakeMSIXContract, 1)]
    runtimeclass ExtractBundleOptions
    {
        /// Created by callers to pass options into ExtractBundle()
        ExtractBundleOptions();
        
        /// If true, the operation will overwrite existing files in the output path
        /// when unpacking.
        /// If false, the operation will fail if a file already exists.
        Boolean OverwriteOutputFilesIfExists;
    };

    /// Options for creating a mountable image
    [contract(MakeMSIXContract, 1)]
    runtimeclass CreateMountableImageOptions
    {
        /// Created by callers to pass options into CreateMountableImage()
        CreateMountableImageOptions();
        
        /// Root directory path for packages inside the image.
        /// Defaults to "WindowsApps"
        String PackageRootDirectoryInImage;

        /// Overwrite output file if it already exists.
        /// Defaults to true.
        Boolean OverwriteOutputFileIfExists;
    };

	/// Identity of a package
    runtimeclass PackageIdentity
    {
        /// Name of the package
        String Name{ get; };
        
        /// Publisher of the package
        String Publisher{ get; };
        
        /// FamilyName of the package
        String FamilyName{ get; };
        
        /// Version of the package
        Windows.ApplicationModel.PackageVersion Version { get; };
        
        /// Architecture of the package
        Windows.System.ProcessorArchitecture Architecture{ get; };
        
        /// ResourceId of the package
        String ResourceId{ get; };
 
        /// FullName of the package.
        String FullName{ get; };
    }

	/// Information about the contents of a package
    runtimeclass PackageInformation
    {
        PackageIdentity Identity{ get; };

        /// Languages supported by the package
        Windows.Foundation.Collections.IVectorView<String> Languages{ get; };

        /// ScaleFactors supported by the package
        Windows.Foundation.Collections.IVectorView<String> ScaleFactors{ get; };
    }

    /// Static methods for creating and unpacking packages.
    [contract(MakeMSIXContract, 1)]
    runtimeclass MakeMSIXManager
    {
        /// Creates packages from the inputPath as specified by the createPackageOptions.
        /// Output path for the full packaged file.
        static Windows.Foundation.IAsyncAction CreatePackage(
            String inputPath,
            String outputFileName,
            CreatePackageOptions createPackageOptions);

        /// Creates bundles from the inputPath as specified by the createBundleOptions.
        /// Output path for the full bundled file.
        static Windows.Foundation.IAsyncAction CreateBundle(
            String inputPath,
            String outputFileName,
            CreateBundleOptions createBundleOptions);

        /// Unpacks a package at inputFileName as specified by the extractPackageOptions.
        /// The output folder to unpack the package into.
        static Windows.Foundation.IAsyncAction ExtractPackage(
            String inputFileName, 
            String outputPath, 
            ExtractPackageOptions extractPackageOptions);

        /// Unbundles a package at inputFileName as specified by the extractBundleOptions.
        /// The output folder to unpack the bundle package into.
        static Windows.Foundation.IAsyncAction ExtractBundle(
            String inputFileName,
            String outputPath,
            ExtractBundleOptions extractBundleOptions);

        /// Creates a Kozani package from an existing package.
        /// inputFileName can be an appx, appxbundle, msix, or msixbundle
        /// Output path for the kozani packaged file.
        /// Format must match input file. If inputFileName is an msix, then outputFileName must be an msix.
        /// If inputFileName is an msixbundle, then outputFileName must be an msixbundle.
        static Windows.Foundation.IAsyncAction CreateKozaniPackage(
            String inputFileName,
            String outputFileName,
            CreateKozaniPackageOptions createKozaniPackageOptions);

        /// Creates a mountable image that contains the packages at inputFileNames.
        /// Valid file extensions for outputFileName are vhd, vhdx, and CIM.
        /// Can be used for Azure App Attach.
        static Windows.Foundation.IAsyncAction CreateMountableImage(
            Windows.Foundation.Collections.IVector<String> inputFileNames,
            String outputFileName,
            CreateMountableImageOptions createMountableImageOptions);

        /// Gets information about the contents of a package 
        static Windows.Foundation.IAsyncOperation<PackageInformation> GetPackageInformation(String packageFileName);
    };
}
